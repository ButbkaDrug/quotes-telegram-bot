package telegram

import (
	"errors"
	"fmt"
	"log/slog"
	"os"

	"github.com/butbkadrug/advanced-telegram-bot-go/internal/userbase"
	"github.com/butbkadrug/advanced-telegram-bot-go/pkg/quotes"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CommandType int

const (
	Start CommandType = iota
	RandomQuote
	QuoteWithTag
	TagsList
	Stats
	Unknown
)

type Telegram struct {
	Info   *tgbotapi.User
	api    *tgbotapi.BotAPI
	token  string
	Logger *slog.Logger
}

type Response interface {
	Command() CommandType
	Arguments() []string
}

// NewTelegram creates a new telegram bot with a given token.
func NewTelegram(token string) (*Telegram, error) {

	api, err := tgbotapi.NewBotAPI(token)

	if err != nil {
		return nil, fmt.Errorf("NewTelegram: failed to start a bot: %w", err)
	}

	me, err := api.GetMe()

	if err != nil {
		return nil, fmt.Errorf("NewTelegram: failed to get a bot info: %w", err)
	}

	logger := slog.New(slog.NewTextHandler(os.Stdout, nil))

	return &Telegram{
		Info:   &me,
		api:    api,
		token:  token,
		Logger: logger,
	}, nil
}

// MESSAGE SENDING METHODS

func (t *Telegram) SendTextMessage(id int64, text string) error {
	message := tgbotapi.NewMessage(id, text)

	_, err := t.api.Send(message)

	return err
}

// Generic Error Message that can be used to send error messages to the user.
func (t *Telegram) SendErrorMessage(id int64, err error, args ...any) error {
	t.Logger.Error(err.Error(), args...)
	_, e := t.api.Send(tgbotapi.NewMessage(id, err.Error()))
	return e
}

// Inform the user that something went wrong on the server side.
func (t *Telegram) SendInternalErrorMessage(id int64, err error) error {
	errMsg := `–ò–∑–∏–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`

	return t.SendErrorMessage(id, errors.New(errMsg), err)
}

// Informs the user about bed request.
func (t *Telegram) SendBadRequestMessage(id int64) error {
	errMsg := `–Ø –≤—Å–µ–≥–æ –ª–∏—à—å —Å–∫—Ä–æ–º—ã–Ω–π –ø–ª–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–ª–æ—Ö–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏.
–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —è —Å–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
–∫–∞–∫ –ø–æ–º–æ—á—å –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!`

	return t.SendErrorMessage(id, errors.New(errMsg))
}

// User will receive nice and friendly error message. Error will be logged
func (t *Telegram) SendConnectionErrorMessage(id int64, err error) error {
	errMsg := `–ü–æ—Ö–æ–∂–µ –Ω–∞—à –¥–æ–º–æ–≤–æ–π —ç–ª—å—Ñ —Å–Ω–æ–≤–∞ –æ—Ç–ª—É—á–∏–ª—Å—è –ø–æ–º–æ–≥–∞—Ç—å –ì–∞—Ä—Ä–∏, –†–æ–Ω—É –∏
–ì–µ—Ä–º–∏–æ–Ω–µ. –ü–æ—ç—Ç–æ–º—É –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å,
–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`

	return t.SendErrorMessage(id, errors.New(errMsg), err)

}

// END OF MESSAGE SENDING METHODS

// GetUpdatesChan starts listening for updates and returns a channel.
func (t *Telegram) GetUpdatesChan() tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	return t.api.GetUpdatesChan(u)
}

// Returns a link to a file hosted on telegram's server. You can use it to
// download the file or pass it to another service
func (t *Telegram) GetFileLink(fileid string) (string, error) {

	file, err := t.api.GetFile(tgbotapi.FileConfig{
		FileID: fileid,
	})

	if err != nil {
		t.Logger.Error("file request error", err)
		return "", err
	}
	return file.Link(t.token), nil
}

func (t *Telegram) SendWelcomeMessage(id int64) {

	text := `–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Ü–∏—Ç–∞—Ç.
–Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/random - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
/tags - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
/tag <tag> - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É —Å —Ç–µ–≥–æ–º <tag>
/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
–° –ª—é–±–æ–≤—å—é,
–¢–≤–æ–π –ë–æ—Ç ü§ñ
`
	err := t.SendTextMessage(id, text)

	if err != nil {
		t.Logger.Error("failed to send welcome message", err)
	}

}

func (t *Telegram) SendRandomQuote(id int64) {
	var quote = &quotes.Quote{}
	quote, err := quotes.GetRandomQuote()

	if err != nil {
		t.SendConnectionErrorMessage(id, err)
		return
	}

	err = t.SendTextMessage(id, fmt.Sprint(quote))

	if err != nil {
		t.Logger.Error("failed to send random quote: %w", err)
	}
}

func (t *Telegram) SendTagsList(id int64) {
	tags, err := quotes.GetTags()

	if err != nil {
		t.SendConnectionErrorMessage(id, err)
		return
	}

	var text string

	for _, tag := range tags {
		text += tag.Key + "\n"
	}

	err = t.SendTextMessage(id, text)

	if err != nil {
		t.Logger.Error("failed to send tags", err)
	}
}

func (t *Telegram) SendQuoteWithTag(id int64, tag string) {

	q, err := quotes.GetQuoteByTag(tag)

	if err != nil && q.Text == "" {
		t.SendConnectionErrorMessage(id, err)
		return
	}

	err = t.SendTextMessage(id, fmt.Sprint(q))

	if err != nil {
		t.Logger.Error("failed to send quote with tag", err)
	}

}

func (t *Telegram) SendUserStats(id int64){
    u, err := userbase.GetUser(id)

    if err != nil {
        t.SendConnectionErrorMessage(id, err)
        return
    }

    err = t.SendTextMessage(id, u.GetStatsString())

	if err != nil {
		t.Logger.Error("failed to send quote with tag", err)
	}
}

func (t *Telegram) Router(id int64, r Response) {

	switch r.Command() {
	case Start:
		t.SendWelcomeMessage(id)
	case RandomQuote:
		t.SendRandomQuote(id)
	case TagsList:
        t.SendTagsList(id)
	case QuoteWithTag:
        t.SendQuoteWithTag(id, r.Arguments()[0])
    case Stats:
        t.SendUserStats(id)
	default:
		t.SendBadRequestMessage(id)
	}
}
