package userbase

import (
	"errors"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"time"

	sql "github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
)

const filename = "users.db"

const (
    initilize = `CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    total_requests INTEGER NOT NULL DEFAULT 1,
    date_joined DATETIME NOT NULL,
    last_visited DATETIME NOT NULL
);
`

    updateLastVisited = `INSERT INTO users (user_id, date_joined, last_visited)
    VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    ON CONFLICT(user_id) DO UPDATE SET
        last_visited = CURRENT_TIMESTAMP;`

    updateTotalRequests = `INSERT INTO users (user_id, date_joined, last_visited)
    VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    ON CONFLICT(user_id) DO UPDATE SET
    total_requests = total_requests + 1;`

    countUsers = `SELECT COUNT(*) FROM users;`

    getUser = `SELECT * FROM users WHERE user_id = ?`
)

type User struct {
    User_id         int64
    Total_requests  int
    Date_joined     time.Time
    Last_visited    time.Time
}

type Title struct {
    Title string
    Message string
    Request int
}

var Titles = []Title{
    {
        Title: "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç",
        Message: "",
        Request: 0,
    },
    {
        Title: "–ò—Å–∫–∞—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏",
        Message: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å —Ç—ã '–ò—Å–∫–∞—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏'. –ü—Ä–æ–¥–æ–ª–∂–∞–π —É–≥–ª—É–±–ª—è—Ç—å —Å–≤–æ–∏ –ø–æ–∑–Ω–∞–Ω–∏—è!",
        Request: 25,

    },
    {
        Title: "–§–∏–ª–æ—Å–æ—Ñ",
        Message: "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è '–§–∏–ª–æ—Å–æ—Ñ'. –¢–≤–æ–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–ª—É–±–∂–µ!",
        Request: 50,

    },
    {
        Title: "–ó–Ω–∞—Ç–æ–∫ —Ü–∏—Ç–∞—Ç",
        Message: "–ë—Ä–∞–≤–æ! –¢–µ–ø–µ—Ä—å —Ç—ã '–ó–Ω–∞—Ç–æ–∫ —Ü–∏—Ç–∞—Ç'. –¢–≤–æ–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –≤ –º–∏—Ä–µ —Ü–∏—Ç–∞—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—Ç!",
        Request: 100,

    },
    {
        Title: "–°–ª–æ–≤–µ—Å–Ω–∏–∫",
        Message: "–í—ã —Å–ª–æ–≤–µ—Å–Ω—ã–π –º–∞—Å—Ç–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã '–°–ª–æ–≤–µ—Å–Ω–∏–∫'. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã!",
        Request: 200,

    },
    {
        Title: "–ú–∞—Å—Ç–µ—Ä —Ü–∏—Ç–∞—Ç",
        Message: "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å '–ú–∞—Å—Ç–µ—Ä —Ü–∏—Ç–∞—Ç'.",
        Request: 400,

    },
    {
        Title: "–ì–ª—É–±–æ–∫–∏–π –º—ãc–ª–∏—Ç–µ–ª—å",
        Message: "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è '–ì–ª—É–±–æ–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å'. –¢–≤–æ–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º–∏!",
        Request: 800,

    },
    {
        Title: "–ú—É–¥—Ä–µ—Ü",
        Message: "–¢—ã —Å—Ç–∞–ª '–ú—É–¥—Ä–µ—Ü–æ–º'. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —ç—Ç–∏–º –≤—ã–¥–∞—é—â–∏–º—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!",
        Request: 1600,

    },
    {
        Title: "–≠–ø–∏—á–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä",
        Message: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è '–≠–ø–∏—á–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä'. –í–∞—à–∏ —Å–ª–æ–≤–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—é—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç–∏!",
        Request: 3200,

    },
    {
        Title: "–í–µ–ª–∏–∫–∏–π –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å",
        Message: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≤–µ—Ä—à–∏–Ω—ã –º—É–¥—Ä–æ—Å—Ç–∏! –¢–µ–ø–µ—Ä—å –≤—ã '–í–µ–ª–∏–∫–∏–π –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å'. –í–∞—à–∏ —Å–ª–æ–≤–∞ ‚Äî —Å–≤–µ—Ç–æ—á –¥–ª—è –≤—Å–µ—Ö!",
        Request: 6400,

    },
}

func(u *User) Graduate() Title {

    for _, t := range Titles {
        if u.Total_requests == t.Request {
            return t
        }
    }

    return Title{}
}

func(u User) CurrentTitle() Title{

    var title Title

    for _, t := range Titles {

        if t.Request < u.Total_requests {
            title = t
        }
    }

    return title
}


func(u User) NextTitle() Title {
    var result Title

    for _, t := range Titles {
        if t.Request > u.Total_requests {
            result = t
            break
        }
    }

    return result
}

func(u User) TimeFromLastVisit() time.Duration {
    return time.Since(u.Last_visited)
}

func(u User) TimeJoined() time.Duration {
    return time.Since(u.Date_joined)
}

func(u User) TimeJoinedString() string {
    var result, unit  string
    duration := time.Since(u.Date_joined)
// Calculate years, days, hours, and minutes
	years := int(duration.Hours() / 24 / 365)
	days := int(duration.Hours() / 24) % 365
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60

    if years > 0 {
        switch years % 10 {
        case 1:
            unit = "–≥–æ–¥"
        case 2, 3, 4:
            unit = "–≥–æ–¥–∞"
        default:
            unit = "–ª–µ—Ç"
        }

        if years > 10 && years < 15 { unit = "–ª–µ—Ç" }
        result += fmt.Sprintf("%d %s", years, unit)
    }
    if days > 0 {
        switch days % 10 {
        case 1:
            unit = "–¥–µ–Ω—å"
        case 2, 3, 4:
            unit = "–¥–Ω—è"
        default:
            unit = "–¥–Ω–µ–π"
        }
        if days > 10 && days < 15 { unit = "–¥–Ω–µ–π" }
        result += fmt.Sprintf("%d %s ", days, unit)
    }
    if hours > 0 {
        switch hours % 10 {
        case 1:
            unit = "—á–∞—Å"
        case 2, 3, 4:
            unit = "—á–∞—Å–∞"
        default:
            unit = "—á–∞—Å–æ–≤"
        }
        if hours > 10 && hours < 15 { unit = "—á–∞—Å–æ–≤" }
        result += fmt.Sprintf("%d %s ", hours, unit)
    }
    if minutes > 0 {
        switch minutes % 10 {
        case 1:
            unit = "–º–∏–Ω—É—Ç—É"
        case 2, 3, 4:
            unit = "–º–∏–Ω—É—Ç—ã"
        default:
            unit = "–º–∏–Ω—É—Ç"
        }
        if minutes > 10 && minutes < 15 { unit = "–º–∏–Ω—É—Ç" }
        result += fmt.Sprintf("%d %s", minutes, unit)
    }

    return result

}

func (u User) GetStatsString()string {
    text := fmt.Sprintf("üìÖ –¢—ã —Å –Ω–∞–º–∏ —É–∂–µ %s\n\n", u.TimeJoinedString())
    text += fmt.Sprintf("üìñ –¶–∏—Ç–∞—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: %d\n\n", u.Total_requests)
    text += fmt.Sprintf("üèÜ –¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª: %s\n\n", u.CurrentTitle().Title)
    if u.CurrentTitle().Request < Titles[len(Titles) - 1].Request {
        text += fmt.Sprintf("üìö –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏—Ç—É–ª–∞(%s) –æ—Å—Ç–∞–ª–æ—Å—å %d —Ü–∏—Ç–∞—Ç\n\n",
            u.NextTitle().Title,
            u.NextTitle().Request - u.Total_requests,
        )
    }

    text += "‚òÄÔ∏è–ú–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–≤—Ç—å!"

    return text
}

func getDatabaseFilepath() (string, error) {
    homeDir, err := os.UserHomeDir()

    if err != nil {
        return "", fmt.Errorf("GetDatabaseFilepath: %w\n", err)
    }

    return filepath.Join(homeDir, filename), nil
}

func createDatabaseFile() error {

    fullpath, err := getDatabaseFilepath()

    if err != nil {
        return fmt.Errorf("CreateDatabaseFile: %w\n", err)
    }


    _, err = os.Create(fullpath)

    if err != nil {
        return fmt.Errorf("CreateDatabaseFile: %w\n", err)
    }

    return nil
}

func databaseFileExists() (bool, error){
    var responce bool

    fullpath, err := getDatabaseFilepath()

    if err != nil  {
        return responce, fmt.Errorf("DatabaseFileNotExists: %w\n", err)
    }

    _, err = os.Stat(fullpath)

    if err != nil {
        return responce, fmt.Errorf("DatabaseFileNotExists: %w\n", err)
    }

    return true, nil
}

func connect() (*sql.DB, error){

    fullpath, err := getDatabaseFilepath()

    if err != nil {
        return nil, fmt.Errorf("Coonect: %w\n", err)
    }

    if _, err := databaseFileExists(); err != nil && errors.Is(err, fs.ErrNotExist) {

        if err := createDatabaseFile(); err != nil {
            return nil,  fmt.Errorf("Connect: %w\n", err)
        }
    }

    db, err := sql.Open("sqlite3", fullpath)

    if err != nil  {
        return nil, fmt.Errorf("Connect: %w\n", err)
    }

    _, err = db.Exec(initilize)

    if err != nil  {
        return nil, err
    }

    return db, nil
}

func UpdateLastVisited(id int64) error {

    db, err := connect()

    if err != nil {
        return fmt.Errorf("UpdateUser failed: %w", err)
    }

    _, err = db.Exec(updateLastVisited, id)

    if err != nil {
        return fmt.Errorf("UpdateUser failed: %w", err)
    }

    return nil
}

func UpdateTotalRequests(id int64) error {

    db, err := connect()

    if err != nil {
        return fmt.Errorf("UpdateUser failed: %w", err)
    }

    _, err = db.Exec(updateTotalRequests, id)

    if err != nil {
        return fmt.Errorf("UpdateUser failed: %w", err)
    }

    return nil
}

func UsersCount() (int, error) {
    var count int
    db, err := connect()

    if err != nil {
        return count, fmt.Errorf("UsersCount failed: %w", err)
    }

    err = db.Get(&count, countUsers)

    if err != nil {
        return count, fmt.Errorf("UsersCount failed: %w", err)
    }

    return count, nil
}

func GetUser(id int64) (*User, error) {
    var u = &User{}
    db, err := connect()

    if err != nil {
        return u, err
    }

    err = db.Get(u, getUser, id)

    if err != nil {
        return u, err
    }

    return u, nil
}
